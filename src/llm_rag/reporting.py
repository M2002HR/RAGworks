"""Reporting & content automation (no external deps).

Features:
- generate_daily_report(metrics: dict, highlights: list[str], date_str: str|None) -> str (Markdown)
- generate_social_post(report_md: str, platform: str="twitter") -> str (<=280 chars)
- render_social_card_svg(title: str, subtitle: str, output_path: str) -> str (writes SVG)
- schedule_post(text: str, when_iso: str, assets: list[str] | None, queue_path: str="schedule.json") -> dict
- load_queue(queue_path: str="schedule.json") -> list[dict]

All data is synthetic for demos/tests. No network calls; no secrets.
"""
from __future__ import annotations
from typing import Dict, List, Optional
from pathlib import Path
import json
import datetime as _dt
import re


def _today_iso() -> str:
    return _dt.date.today().isoformat()


def generate_daily_report(metrics: Dict[str, object], highlights: List[str], date_str: Optional[str] = None) -> str:
    """Return Markdown report with a metrics table and bullet highlights."""
    d = date_str or _today_iso()
    lines = [f"# Daily Report â€” {d}", "", "## Metrics", "", "| Metric | Value |", "|---|---|"]
    for k, v in metrics.items():
        lines.append(f"| {k} | {v} |")
    lines += ["", "## Highlights", ""]
    for h in highlights:
        if h.strip():
            lines.append(f"- {h.strip()}")
    return "\n".join(lines).strip() + "\n"


_METRIC_ROW_RE = re.compile(r"^\|\s*([^|]+?)\s*\|\s*([^|]+?)\s*\|$", re.MULTILINE)
_FIRST_BULLET_RE = re.compile(r"^- (.+)$", re.MULTILINE)


def generate_social_post(report_md: str, platform: str = "twitter") -> str:
    """Create a short social post from a report; keep under ~280 chars."""
    # Pick the first bullet or fall back to first metric row; very simple heuristic.
    m = _FIRST_BULLET_RE.search(report_md)
    summary = m.group(1).strip() if m else None
    if not summary:
        m2 = _METRIC_ROW_RE.search(report_md)
        if m2:
            summary = f"{m2.group(1).strip()}: {m2.group(2).strip()}"
    summary = summary or "Daily update"
    hashtags = "#automation #ai"
    text = f"Daily update: {summary}. {hashtags}"
    # Trim hard to 280 just in case target is Twitter-like.
    return text[:280]


def render_social_card_svg(title: str, subtitle: str, output_path: str) -> str:
    """Render a simple SVG 'card' without external libraries."""
    svg = f'''<svg xmlns="http://www.w3.org/2000/svg" width="1200" height="630">
  <rect width="100%" height="100%" fill="#111"/>
  <text x="60" y="200" font-size="72" fill="#fff" font-family="Arial,Helvetica,sans-serif">{title}</text>
  <text x="60" y="300" font-size="42" fill="#9ae6b4" font-family="Arial,Helvetica,sans-serif">{subtitle}</text>
    <text x="60" y="560" font-size="24" fill="#bbb" font-family="Arial,Helvetica,sans-serif">Generated by RAGworks (stub)</text>
</svg>'''
    p = Path(output_path)
    p.parent.mkdir(parents=True, exist_ok=True)
    p.write_text(svg, encoding="utf-8")
    return str(p)


def schedule_post(text: str, when_iso: str, assets: Optional[List[str]] = None, queue_path: str = "schedule.json") -> Dict:
    """Append a post to a local JSON queue (stub scheduler)."""
    entry = {"text": text, "when": when_iso, "assets": list(assets or [])}
    q = []
    qp = Path(queue_path)
    if qp.exists():
        try:
            q = json.loads(qp.read_text(encoding="utf-8"))
        except Exception:
            q = []
    q.append(entry)
    qp.parent.mkdir(parents=True, exist_ok=True)
    qp.write_text(json.dumps(q, ensure_ascii=False, indent=2), encoding="utf-8")
    return entry


def load_queue(queue_path: str = "schedule.json") -> List[Dict]:
    p = Path(queue_path)
    if not p.exists():
        return []
    try:
        return json.loads(p.read_text(encoding="utf-8"))
    except Exception:
        return []


__all__ = [
    "generate_daily_report",
    "generate_social_post",
    "render_social_card_svg",
    "schedule_post",
    "load_queue",
]
